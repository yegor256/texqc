#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (c) 2020 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

VERSION = '0.0.0'

STDOUT.sync = true

require 'backtrace'
require 'loog'
require 'open3'
require 'slop'

begin
  log = Loog::REGULAR
  begin
    opts = Slop.parse(ARGV, strict: true, help: true) do |o|
      o.banner = "Usage (#{VERSION}): texqc [options] file
Options are:"
      o.array '--dry', 'Don\'t fail the build on errors'
      o.bool '--version', 'Print current version' do
        puts VERSION
        exit
      end
      o.bool '--verbose', 'Make it more verbose than usual' do
        log = Loog::VERBOSE
      end
      o.bool '--help', 'Read this: https://github.com/yegor256/texqc' do
        puts o
        exit
      end
    end
  rescue Slop::Error => ex
    raise ex.message
  end
  raise 'Try --help' if opts.arguments.empty?
  raise 'Too many arguments' unless opts.arguments.length == 1
  errors = 0
  f = "#{opts.arguments[0]}.log"
  File.readlines(f).each do |t|
    if t.start_with?('Underfull ', 'Overfull ', 'LaTeX Warning: ')
      errors += 1
      puts t
    end
  end
  unless errors.zero?
    log.info("#{errors} LaTeX processing errors found in #{f.inspect}")
    exit 1
  end
  log.info("No LaTeX processing errors found in #{f.inspect}")
rescue StandardError => ex
  if opts[:verbose]
    puts Backtrace.new(ex).to_s
  else
    puts "ERROR: #{ex.message}"
  end
  exit(255)
end
