#!/usr/bin/env ruby
# frozen_string_literal: true

# SPDX-FileCopyrightText: Copyright (c) 2020-2025 Yegor Bugayenko
# SPDX-License-Identifier: MIT

VERSION = '0.0.0'

STDOUT.sync = true

require 'backtrace'
require 'loog'
require 'open3'
require 'slop'

# Errors counter.
class Errors
  attr_reader :count
  def initialize
    @count = 0
  end

  def report(pos, txt)
    puts "[#{pos}] #{txt}"
    @count += 1
  end
end

def config(path)
  f = File.expand_path(path)
  args = []
  if File.exist?(f)
    args += File.readlines(f).map(&:strip)
    puts "Found #{args.length} lines in #{File.absolute_path(f)}"
  end
  args
end

begin
  log = Loog::REGULAR
  args = config('~/.texqc') + config('.texqc') + ARGV

  begin
    opts = Slop.parse(args, strict: true, help: true) do |o|
      o.banner = "Usage (#{VERSION}): texqc [options] file...
Options are:"
      o.bool '--dry', 'Don\'t fail the build on errors'
      o.array '--ignore', 'Ignore given regexp'
      o.bool '--version', 'Print current version' do
        puts VERSION
        exit
      end
      o.bool '--verbose', 'Make it more verbose than usual' do
        log = Loog::VERBOSE
      end
      o.bool '--help', 'Read this: https://github.com/yegor256/texqc' do
        puts o
        exit
      end
    end
  rescue Slop::Error => ex
    raise ex.message
  end
  candidates = opts.arguments
  candidates += Dir['*.tex'] if candidates.empty?
  puts "Args: #{args}" if opts[:verbose]
  puts "Ignore: #{opts[:ignore]}" if opts[:verbose]
  puts "Candidates: #{candidates}" if opts[:verbose]
  candidates.each do |doc|
    if doc.end_with?('.tex')
      log.info("File extention removed from #{doc.inspect}")
      doc = doc.gsub(/\.tex$/, '')
    end
    f = "#{doc}.log"
    e = Errors.new
    matches = [
      /^Underfull /,
      /^Overfull /,
      /^LaTeX Warning: /,
      /^pdfTeX warning: /,
      /^Class [a-zA-Z0-9\*]+ Warning: /,
      /^Package [a-zA-Z0-9\*]+ Warning: /,
      /^LaTeX Font Warning: /
    ]
    File.readlines(f).each_with_index do |t, i|
      matches.each do |p|
        next unless p.match?(t)
        next if opts[:ignore].any? { |re| /.*#{re}.*/.match?(t) }
        e.report(i, t)
      end
    end
    unless e.count.zero?
      log.info("#{e.count} LaTeX processing errors found in #{f.inspect}")
      exit 1
    end
    log.info("No LaTeX processing errors found in #{f.inspect}")
  end
rescue StandardError => ex
  if opts[:verbose]
    puts Backtrace.new(ex).to_s
  else
    puts "ERROR: #{ex.message}"
  end
  exit(255)
end
